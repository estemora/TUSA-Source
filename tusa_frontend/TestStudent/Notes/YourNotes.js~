import React, { useState, useEffect } from 'react';
import axios from 'axios';
import '../tusastyles.css';
import './notesstyles.css';
import NavBar from '../NavBar';
import Header from '../Header';

function NotesPage() {
  const [showNewNoteForm, setShowNewNoteForm] = useState(false);
  const [showNotes, setShowNotes] = useState(true);
  const [formData, setFormData] = useState({
    username: '',
    recipient: '',
    subject: '',
    body: ''
  });
  const [notes, setNotes] = useState([]);
  const [noteButtonClicked, setNoteButtonClicked] = useState(false);
  const [notesTitleVisible, setNotesTitleVisible] = useState(true); 

  useEffect(() => {
    // Get cookie string
    const cookieString = document.cookie;
    console.log('Cookie String:', cookieString);
  
    // Split cookie string into individual cookies
    const cookies = cookieString.split(';');
    console.log('Individual Cookies:', cookies);
  
    let token = '';
    let username = '';
  
    cookies.forEach(cookie => {
      const [name, value] = cookie.trim().split('=');
      console.log('Cookie Name:', name);
      console.log('Cookie Value:', value);
      if (name === 'token') {
        token = value;
      } else if (name === 'username') {
        username = value;
      }
    });
  
    setFormData(prevState => ({
      ...prevState,
      token: token,
      username: username
    }));
  
    if (token && username) {
      fetchNotes(username); 
    }
  }, [formData.username]); 
  
  const fetchNotes = async (username) => { 
    try {
      console.log('Fetching notes for username:', username); 
      const url = `http://www.cs.transy.edu/TUSA/js-login/front/build/showNotes.cgi?username=${username}`;
      console.log('Request URL:', url);
      const response = await axios.get(url);
      console.log('Response:', response);
      setNotes(response.data);
      console.log('Notes:', response.data);
    } catch (error) {
      console.error('Error fetching notes:', error);
    }
  };
  

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    console.log(`Input field "${name}" changed. New value: "${value}"`);
    setFormData({
      ...formData,
      [name]: value
    });
  };
  
  const submitNewNoteForm = async (e) => {
    e.preventDefault();
    console.log('Submitting new note form...');
    console.log('Form Data:', formData); 
  
    try {
      const response = await axios.post(
        'http://www.cs.transy.edu/TUSA/js-login/front/build/addNote.cgi',
        formData,
        {
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
          }
        }
      );
      console.log('Response:', response.data); 
      fetchNotes(); 
    } catch (error) {
      console.error('Error submitting form:', error);
      alert('Error submitting form. Please try again later.');
    }
  };
  
  

  const handleNoteButtonClick = (type) => {
    if (type === 'new') {
      setShowNewNoteForm(true);
      setNoteButtonClicked(true);
      setNotesTitleVisible(false); 
      setShowNotes(false)
    } else {
      fetchNotes();
      setNotesTitleVisible(true); 
    }
  };
  

  return (
    <div>
      <Header />
      <div className="below-nav">
        <NavBar />
        <main>
          {notesTitleVisible ? (
            <section className="notes-title">
              <p className="notes-text"> NOTES </p>
            </section>
          ) : (
            <section className="notes-title">
              <p className="notes-text"> YOUR NOTES </p>
            </section>
          )}
        </main>
        <div className="notes-section">
          <ul className="menu">
            {!noteButtonClicked && (
              <a>
                <button className="button" onClick={() => handleNoteButtonClick('new')}>
                  <div className="button-text"> NEW NOTE </div> <br /> <br />
                </button>
              </a>
            )}
            {!noteButtonClicked && (
              <a>
                <button className="delete-notes" onClick={() => handleNoteButtonClick('delete')}>
                  <div className="button-text"> DELETE NOTES </div> <br /> <br />
                </button>
              </a>
            )}
          </ul>
          {showNewNoteForm && (
            <div className="notes-section">
              <form className="note-form" action="#" method="post">
                <div id="notes-right">
                  <a>Subject:</a>
                  <textarea
                    name="subject"
                    rows="1"
                    className="note-subject"
                    spellCheck="true"
                    contentEditable="true"
                    onChange={handleInputChange}
                  ></textarea>
                  <div className="to-box">
                    <div className="to-text">To:</div>
                    <textarea
                      name="recipient"
                      rows="1"
                      className="to-field"
                      contentEditable="true"
                      onChange={handleInputChange}
                    ></textarea>
                  </div> <br /><br /> <br /><br />
                  <textarea
                    name="body"
                    className="note-body"
                    spellCheck="true"
                    contentEditable="true"
                    onChange={handleInputChange}
                  ></textarea>
                  <button
                      type="submit"
                      className="send-button"
                      onClick={submitNewNoteForm}
                  >
                      Send
                  </button>
                </div>
                  <div id="notes-left">
                      <a><button className="delete-button"> New Note </button></a> <br />
                      <a><button className="delete-button"> Delete Note </button></a> <br />
                      <a><button className="delete-button"> Edit Note </button> </a> <br />
                      <a><button className="delete-button"> All Notes </button> </a> <br />
                  </div>
              </form>
            </div>
          )}
            {showNotes && (
		<div className="note-list">
		    {notes.map((note, index) => (
			<div className="sent-note">
			<div key={index} className="note">
			    
				<div className="note-subject">
				    <a>{note.subject}</a> <br />
				    <a>To: {note.recipient}</a>
				</div>
				<div className="note-body">
				    <a>{note.body}</a>
				</div>
			    </div>
			</div>
		    ))}
		</div>
            )}
        </div>
      </div>
    </div>
  );
}

export default NotesPage;









